/**
 * @module schema/types/container-event.type.js
 */

const gql = require('graphql')
const UserType = require('./user.type')
const UserModel = require('../../models/user.model')

module.exports = new gql.GraphQLObjectType({
  name: 'ContainerEvent',
  description: 'Events generated by containers',
  fields () {
    return {
      id: {
        type: gql.GraphQLString,
        description: 'Unique identifier for a container event'
      },
      container: {
        type: new gql.GraphQLNonNull(gql.GraphQLString),
        description: 'Container id'
      },
      username: {
        type: gql.GraphQLString,
        description: 'The user the container belongs to'
      },
      event: {
        type: gql.GraphQLString,
        description: 'The event type like `created`, `deleted`, etc.'
      },
      created: {
        type: gql.GraphQLString,
        description: 'Date of creation'
      },
      updated: {
        type: gql.GraphQLString,
        description: 'Last update date'
      },
      meta: {
        type: new gql.GraphQLScalarType({
          name: 'ContainerEventMeta',
          description: 'Extra information that a container event can produce',
          serialize: r => r,
          parseValue: r => r,
          parseLiteral: r => r
        }),
        defaultValue: {}
      },
      user: {
        type: UserType,
        description: 'Get the owner user of the container that generated the event',
        resolve: (root, args, context) => UserModel.findOne({ username: root.username })
      }
    }
  }
})
